variables
% All the required constants needed to calcualtate the deflection at mid
% point of beam are set to unity. This was done in order to obtain the
% constant term needed for the expression.
%
%Length defined as unity
l=1
%
%define areas as unity
A1 = 1
%
Ixx1 = 1
%
Iyy1 = Ixx1
%
J1 = 0.95*(Ixx1+Iyy1)
%
%average E used based on problem statement
Eo = 1
E1 = 7/6*Eo
E2 = 3/2*Eo
E3 = 11/6*Eo
%
mu = 0.29
G1 = E1/(2*(1+mu))
G2 = E2/(2*(1+mu))
G3 = E3/(2*(1+mu))
%
%rho not requied but kept in order to ensure that element code runs
rho = 7860
%
%
element properties
% Beam format
% E G   rho A1    A2  J1  J2  Ixx1 Ixx2   Iyy1 Iyy2
E1 G1 rho A1 A1 J1 J1 Ixx1 Ixx1 Iyy1 Iyy1
E2 G2 rho A1 A1 J1 J1 Ixx1 Ixx1 Iyy1 Iyy1
E3 G3 rho A1 A1 J1 J1 Ixx1 Ixx1 Iyy1 Iyy1
%
%
beam2exampleMCk2 elements
%node1 node2 node3 pointnum (beam properties number)
1	2	1	1
2	3	1	2
3	4	1	3
%
nodes
% I can include comment lines
% node num, x y z, Node number isn't ever stored in nodes matrix
1	0	0	0
2	0	l/3	0
3	0	2*(l/3)	0
4	0	3*(l/3)	0
%
points
1 1 1 1
%
fix clamp
1
4
% The preceeding put a clamp boundary condition on node 1.
%
%Unity load used
load 
2 2 1
3 2 1
%
actions
plotundeformed
staticanalysis
plotdeformed
%Here are the displacements, X
X
end